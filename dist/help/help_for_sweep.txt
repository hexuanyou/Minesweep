#############################################################

This is the help file for the mine sweepping assist program
It is a program used to sweep the mine in assist mode
Also there is a sweeper mine game if you select the game mode

#############################################################

界面：
  File/new → 重新开始
  File/Exit → 退出
  Edit/Undo → 撤销（仅在assist模式下可用）
  Edit/Setting → 设置，区域大小和雷数
  Mode/game mode → 游戏模式，扫雷游戏(默认)
  Mode/assist mode → 协助模式，输入空白区域雷数，程序自动计算有雷区和无雷区

操作：
  game mode（扫雷游戏标配）
  左键单击 → 点开
  右键单击 → 标记有雷：标记“|>”
  再次右键单击 → 假设有雷：标记“？”
  左右键同时点击 → 显示数字周围区域，如果已无雷，自动点开

  assist mode
  左键单击 → 点开，然后可以输入雷数
  左键双击空白区域（等效输入0） → 点开周围3X3的方格
  右键单击 → 标记有雷：标记“|>”
  空白区域可输入雷数（1~8），程序自动进行扫描，无雷区显示绿色，有雷区显示浅红并标记“@”
  空白区输入0 → 点开周围3X3的方格
  空白区输入9 → 标记有雷：标记红色“@”
  Edit/Undo → 撤销点开的方格

算法：
  分级机制：
    1）第一级：满足未探明的区域等于雷数：not open and sum(flag_mine) == minelst，标记有雷：flag_mine = 1
    2）第二级：在第一级标记一些雷之后，扫描数字周围 3 X 3 区域，把无雷区域找出，类似左右键同时按效果，
    只不过自动扫描一遍用一个递归函数实现，直至无更新
    前两级为初级算法 

    3）第三级：中级算法，相邻两个数字组合判断，每个数字分别取四个方位的数字组合成一组（前提是该方位有数字）：
    右  、下  （第一组合，相交区域：4）:{A[i,j],A[i,j+1]}, {A[i,j],A[i+1,j]}
    右右、下下（第二组合，相交区域：3）:{A[i,j],A[i,j+2]}, {A[i,j],A[i+2,j]}
    相交区域少于3，暂时不用，中级解决不了的，留给高级算法解决
    中级算法思路是扣除相交区域，判断剩下部分有雷或无雷，也是用一个递归函数实现，直至无更新

    4）第四级：高级算法，采用区域绑定机制，绑定的区域特征：在同一个数字周围，有n个雷（n<绑定区域），
    绑定区域越小越好，扣除绑定区域，判断剩下区域有雷或无雷